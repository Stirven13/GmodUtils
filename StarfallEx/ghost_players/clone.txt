--@name Clone
--@author NepNep | discord: stirven
--@server



local RagdollClone = class("RagdollClone")

function RagdollClone:initialize(model)
    self.ragdoll = prop.createRagdoll(owner():getModel(), true)
    
    self.mainBonePos = self.ragdoll:getPos()
end

function RagdollClone:setPos(value)
    local physBone = self.ragdoll:getPhysicsObjectNum(0)
    physBone:setPos(value + self.mainBonePos)
end

function RagdollClone:getValveBones()
    local boneCount = self.ragdoll:getPhysicsObjectCount()
    local valveBipedPattern = "ValveBiped.Bip01_"
    
    local valveBones = {}
    
    for boneIndex = 0, boneCount do
        local boneName = self.ragdoll:getBoneName(boneIndex)
        if string.match(boneName, valveBipedPattern) == nil then continue end
        
        print(boneIndex .. "\t" .. boneName)
        local bone = self.ragdoll:translatePhysBoneToBone(boneIndex)
        if bone == -1 then
            print("invalid bone")
            print()
            continue
        end
        local bonePos, boneAngles = self.ragdoll:getBonePosition(bone)
        
        print(bonePos)
        print(boneAngles)
        print()
        
        table.insert(valveBones, boneIndex)
    end
    
    return valveBones
end

function RagdollClone:copyPoseValveBones(entityCopy)
    
end

function RagdollClone:copyPose(entityCopy)
    if self.ragdoll:getModel() != entityCopy:getModel() then
        self:copyPoseValveBones(entityCopy)
        return
    end
end
    


local ragdollOwner = RagdollClone:new(owner():getModel())
ragdollOwner:setPos(chip():getPos())

ragdollOwner:getValveBones()

/*
local function isValveBipedBone(boneName)
  local valveBipedPattern = "^ValveBiped_.*$"
  return string.match(boneName, valveBipedPattern) ~= nil
end


local boneInfo = {}

-- boneInfo:
--   Pos: Vector
--   Angle: Angle
--   Parent: str

local ownerRagdoll = 

local ragdollMainBoneOffset = ownerRagdoll:getPos()
local physBone = ownerRagdoll:getPhysicsObjectNum(0)



for i = 0, ownerRagdoll:getBoneCount() - 1 do
    
end
*/





