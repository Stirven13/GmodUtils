--@name Advanced Logs
--@author NepNep | discord: stirven
--@shared

if CLIENT then
    if player() ~= owner() then return end
    
    local playerInfo = {}
    --[[
    Player:
        FreezesEntities: table[entity]
        UnFreezesEntities: table[entity]
        
        ConsumableQuota: float -- May be not realisation
    ]]
    
    for k, v in ipairs(find.allPlayers()) do
        table.insert(playerInfo, v)
    end
    
    local chipID = chip():entIndex()
    print(entity(chipID))
    
    local function addEntityToPlayerInfo(ent)
        local ownerEntity = ent:getOwner()
        if not isValid(ownerEntity) then return end
        if not ownerEntity:isPlayer() then return end
        if not table.hasValue(table.getKeys(playerInfo), ownerEntity) then
            playerInfo[ownerEntity] = {
                FreezesEntities = {},
                UnFreezesEntities = {}
            }
        end
        net.start("GetInfoEntity")
        net.writeInt(ent:entIndex(), 16)
        net.send()
    end
    
    local function removeEntityFromPlayerInfo(ent)
        local ownerEntity = ent:getOwner()
        if not isValid(ownerEntity) then return end
        if not ownerEntity:isPlayer() then return end
        if not table.hasValue(table.getKeys(playerInfo), ownerEntity) then
            playerInfo[ownerEntity] = {
                FreezesEntities = {},
                UnFreezesEntities = {}
            }
            return
        end
        
        if table.hasValue(playerInfo[ownerEntity].UnFreezesEntities, ent) then
            table.remove(playerInfo[ownerEntity].UnFreezesEntities, ent)
        end
        if table.hasValue(playerInfo[ownerEntity].FreezesEntities, ent) then
            table.remove(playerInfo[ownerEntity].FreezesEntities, ent)
        end
    end
    
    print("Start load Entities...")
    local entityIndex = 0
    hook.add("tick", "GetAllAvailableEntity", function()
        entityIndex = entityIndex + 1
        
        if entityIndex == chipID then
            hook.remove("tick", "GetAllAvailableEntity")
            print("Load Entities is end.")
            entityIndex = nil
            return
        end
        
        local currentEntity = entity(entityIndex)
        if not isValid(currentEntity) then return end
        addEntityToPlayerInfo(currentEntity)
    end)
    
    
    net.receive("AddAdvancedEntityToPlayerInfo", function()
        local entityValue = entity(net.readInt(16))
        local entityInfo = net.readTable()
        
        if entityInfo.isFrozen then
            table.insert(playerInfo[entityValue:getOwner()].FreezesEntities, entityValue)
        else
            print(entityValue)
            table.insert(playerInfo[entityValue:getOwner()].UnFreezesEntities, entityValue)
        end
        
        for i = 1, table.count(playerInfo[entityValue:getOwner()].FreezesEntities) do
            print(playerInfo[entityValue:getOwner()].FreezesEntities[i])
        end
        for i = 1, table.count(playerInfo[entityValue:getOwner()].UnFreezesEntities) do
            print(playerInfo[entityValue:getOwner()].UnFreezesEntities[i])
        end
    end)
    
    hook.add("OnEntityCreated", "AddNewEntityToPlayerInfo", function(ent)
        addEntityToPlayerInfo(ent)
    end)
    
    hook.add("EntityRemoved", "DeleteEntityFromPlayerInfo", function(ent)
        removeEntityFromPlayerInfo(ent)
    end)
    
    net.receive("AddPlayerToPlayerInfo", function()
        local ply = net.readEntity()
        
        if not table.hasValue(table.getKeys(playerInfo), ply) then
            playerInfo[ply] = {
                FreezesEntities = {},
                UnFreezesEntities = {}
            }
        end
    end)
    
    
    
elseif SERVER then   
    net.receive("GetInfoEntity", function()
        net.start("AddAdvancedEntityToPlayerInfo")
        local entityValue = entity(net.readInt(16))
        net.writeInt(entityValue:entIndex(), 16)
        net.writeTable({
            isFrozen = entityValue:isFrozen()
        })
        net.send()
    end)
    
    hook.add("PlayerInitialSpawn", "AddPlayerToPlayerInfo", function(ply, transition)
        net.start("AddPlayerToPlayerInfo")
        net.writeEntity(ply)
        net.send()
    end)
end

--[[
server/client
PhysgunPickup(Player ply, Entity ent)
[src]
Called when an entity gets picked up by a physgun
This hook is predicted.

Parameters
Player ply
Player picking up the entity
Entity ent
Entity being picked up



server/client
PhysgunDrop(Player ply, Entity ent)
[src]
Called when an entity being held by a physgun gets dropped

Parameters
Player ply
Player dropping the entity
Entity ent
Entity being dropped



server
PlayerUnfrozeObject(Player ply, Entity ent, PhysObj physobj)
[src]
Called when a player unfreezes an object

Parameters
Player ply
The player who has unfrozen an entity
Entity ent
The unfrozen entity
PhysObj physobj
The physics object of the unfrozen entity



server
OnPhysgunFreeze(Weapon physgun, PhysObj physobj, Entity ent, Player ply)
[src]
Called when an entity is being frozen
Note this is not called for players or NPCs held with the physgun (bug)

Parameters
Weapon physgun
The Physgun freezing the entity
PhysObj physobj
PhysObj of the entity
Entity ent
Entity being frozen
Player ply
Player freezing the entity
]]

