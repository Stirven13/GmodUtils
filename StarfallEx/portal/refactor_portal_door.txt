--@name Refactor PortalDoor
--@author NepNep | discord: stirven
--@server



local MapData = class("MapData")

function MapData:correctMapSize()
    if self.mapName == "gm_vyten" then
        self.mapSizeMax.z = 12000
    elseif self.mapName == "gm_mobenix_v3_final" then
        self.mapSizeMax.z = 5000
    elseif self.mapName == "gm_bigcity_improved" then
        self.mapSizeMax.z = 1500
    elseif self.mapName == "gm_novenka_d" then
        self.mapSizeMax.z = 10000
    elseif self.mapName == "gm_excess_construct_13" then
        self.mapSizeMax.z = 3000
    elseif self.mapName == "gm_mobenix_winter" then
        self.mapSizeMax.z = 3000
    elseif self.mapName == "gm_thebox_17" then
        self.mapSizeMin.z = -10000
        self.mapSizeMax.z = -13500
    else
        print("Use a default map size - " .. self.mapName)
    end
end

function MapData:initialize()
    self.entity = entity(0)
    self.mapName = game.getMap()
    self.mapSizeMin, self.mapSizeMax = self.entity:getModelBounds()
    self:correctMapSize()
end



local DoorSystem = class("DoorSystem")

function DoorSystem:createDoor()
    local success, result = pcall(function()
        local door = hologram.create(Vector(), Angle(), "models/props_c17/door01_left.mdl")
        door:setSkin(11)
        door:setBodygroup(1, 1)
        return door
    end)
    
    if not success then return end
    return result
end

function DoorSystem:createVehicle()
    local success, result = pcall(function()
        local vehicle = prop.createSent(Vector(), Angle(), "Chair_Wood", true)
        vehicle:setColor(Color(0, 0, 0, 0))
        vehicle:setNocollideAll(true)
        return vehicle
    end)
    
    if not success then return end
    return result
end

function DoorSystem:removeOnLeaveVehicle(ply, vehicle)
    if not self then return end
    if not isValid(vehicle) then return end
    if not isValid(self.vehicle) then return end
    if vehicle:entIndex() ~= self.vehicle:entIndex() then return end
    
    vehicle:remove()
end

function DoorSystem:getPos()
    return self.pos
end

function DoorSystem:getAngles()
    return self.angle
end

function DoorSystem:setPos(newPos)
    self.pos = newPos
    
    if isValid(self.door) then
        local tempDoorOffsetPos = self.doorOffsetPos:clone()
        tempDoorOffsetPos:rotate(self.angle)
        self.door:setPos(newPos + tempDoorOffsetPos)
    end
    
    if isValid(self.vehicle) then
        self.vehicle:setPos(newPos)
    end
end

function DoorSystem:setAngles(newAngles)
    self.angle = newAngles
    
    if isValid(self.door) then
        self.door:setAngles(newAngles)
        
        self:setPos(self.pos)
    end
    
    if isValid(self.vehicle) then
        self.vehicle:setAngles(newAngles)
    end
end

function DoorSystem:makeValid()
    if not self then return end
    if self.pos == nil then return end
    
    if not isValid(self.door) then
        self.door = self:createDoor()
        self:setPos(self.pos)
        self:setAngles(self.angle)
    end
    
    if not isValid(self.vehicle) then
        self.vehicle = self:createVehicle()
        self:setPos(self.pos)
        self:setAngles(self.angle)
    end
end

function DoorSystem:initialize(door_name)
    self.door_name = door_name
    
    self.door = self:createDoor()
    self.vehicle = self:createVehicle()
    self.pos = nil
    self.angle = Angle()
    self.doorOffsetPos = Vector(0, -23.640625, 54.28125)
    
    hook.add("PlayerLeaveVehicle", string.format("DeleteOnLeave%s", self.door_name), self.removeOnLeaveVehicle)
    hook.add("Tick", string.format("MakeValid%s", self.door_name), self.makeValid)
end



local PortalDoorSystem = class("PortalDoorSystem")

function PortalDoorSystem:initialize()
    self.map = MapData:new()
    
    self.door1 = DoorSystem:new("Door1")
    self.door2 = DoorSystem:new("Door2")
    
    self.openSound = "Doors.FullOpen4"
    self.closeSound = "Doors.FullClose4"
    self.epsilon = 0.1
    self.doorSize = Vector(11.728854656219, 48.5625, 108.5625)
end

function PortalDoorSystem:traceCorrectPoint(firstPoint, secondPoint)
    local midPoint = (firstPoint + secondPoint) / 2
    
    if firstPoint:getDistance(midPoint) < self.epsilon then
        return firstPoint
    end
    
    local firstTraceResult = trace.line(firstPoint, midPoint)
    if firstTraceResult.Hit then
        return self:traceCorrectPoint(firstPoint, midPoint)
    end
    
    local secondTraceResult = trace.line(midPoint, secondPoint)
    if secondTraceResult.Hit then
        return self:traceCorrectPoint(midPoint, secondPoint)
    end
    
    return firstPoint
end

function PortalDoorSystem:findFloor(point)
    local upPoint = Vector(point.x, point.y, self.map.mapSizeMax.z)    
    local downPoint = Vector(point.x, point.y, self.map.mapSizeMin.z)
    
    local roofTraceResult = trace.line(upPoint, downPoint)
    if not roofTraceResult.Hit then return nil end
    
    local roofPoint = roofTraceResult.HitPos
    
    local correctedPoint = self:traceCorrectPoint(roofPoint, downPoint)
    
    return correctedPoint
end

function PortalDoorSystem:checkNotFreeSpace(point, neededSpace)
    local pointOverDoor = point + Vector(0, 0, self.doorSize.z + 5)
    
    local verticalTraceResult = trace.line(pointOverDoor, pointOverDoor + Vector(0, 0, neededSpace.z))
    
    if verticalTraceResult.Hit then
        return true
    end
    
    return false
end

function PortalDoorSystem:setDoorForPlayer(ply)
    local traceResult = ply:getEyeTrace()
    if not traceResult.Hit then return end
    
    local plySize = ply:obbSize()
    local point1 =  traceResult.HitPos
    local angle1 = Angle(0, 1, 0) * ply:getEyeAngles()
    local angle2 = angle1
    
    local tryCount = 0
    hook.add("tick", "FindPoint", function()
        while true do
            if cpuTotalAverage() > cpuMax() * 0.75 then return end
            tryCount = tryCount + 1
            
            local randomPoint = Vector(math.random(self.map.mapSizeMin.x, self.map.mapSizeMax.x), math.random(self.map.mapSizeMin.y, self.map.mapSizeMax.y), 0)
            local correctPoint = self:findFloor(randomPoint)
            
            if tryCount % 1000 == 0 then
                print(tryCount)
            end
            
            if correctPoint == nil then continue end
            if self:checkNotFreeSpace(correctPoint, plySize) then continue end
            
            point2 = correctPoint:clone()
            
            self.door1:setPos(point1)
            self.door1:setAngles(angle1)
            
            self.door2:setPos(point2)
            self.door2:setAngles(angle2)
            
            self.door1:makeValid()
            self.door2:makeValid()
            
            if self.door2.door:getWaterLevel() != 0 then continue end
            
            print(self.door2:getPos())
            
            hook.remove("tick", "FindPoint")
            return
        end
    end)
end

function PortalDoorSystem:reactOnCommand(ply, text)
    local textLower = string.lower(text)
    
    if not table.hasValue({"!nepdoor", "!nep_door", "!nep door"}, textLower) then return end
    self:setDoorForPlayer(ply)
end

function PortalDoorSystem:playerEnterInVehicle(ply, vehicle)
    if not isValid(vehicle) then return end
    
    if isValid(self.door1.vehicle) then
        if vehicle:entIndex() == self.door1.vehicle:entIndex() then
            self.door1.door:emitSound(self.openSound)
            self.door2.door:emitSound(self.closeSound)
            self.door1.vehicle:setPos(self.door2:getPos())
            timer.simple(1, function()
                if isValid(self.door1.vehicle) then
                    self.door1.vehicle:remove()
                end
            end)
            return
        end
    end
    
    if isValid(self.door2.vehicle) then
        if vehicle:entIndex() == self.door2.vehicle:entIndex() then
            self.door2.door:emitSound(self.openSound)
            self.door1.door:emitSound(self.closeSound)
            self.door2.vehicle:setPos(self.door1:getPos())
            timer.simple(1, function()
                if isValid(self.door2.vehicle) then
                    self.door2.vehicle:remove()
                end
            end)
            return
        end
    end
end

--function PortalDoorSystem:removeVehicleOnLeave


local portalDoorSystem = PortalDoorSystem:new()

hook.add("PlayerSay", "CheckPlayerSay", function(ply, text, teamChat)
    portalDoorSystem:reactOnCommand(ply, text)
end)

hook.add("PlayerEnteredVehicle", "TeleportWhenEnterInPod", function(ply, vehicle, num)
    portalDoorSystem:playerEnterInVehicle(ply, vehicle)
end)
