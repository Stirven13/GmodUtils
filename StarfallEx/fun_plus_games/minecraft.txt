--@name Minecraft
--@author NepNep | discord: stirven
--@shared

// CONFIG
local RANGE_PLACE = 250 // Allowed distance between eyes and tracedHitPos
local SCALE_BLOCK = 0.5 // Scale of blaced blocks. Allowed: 0.25, 0.5, 0.75, 1, 2, 4, 6, 8


local allAvailableModel = {
    [0.25] = "models/hunter/blocks/cube025x025x025.mdl",
    [0.5] = "models/hunter/blocks/cube05x05x05.mdl",
    [0.75] = "models/hunter/blocks/cube075x075x075.mdl",
    [1] = "models/hunter/blocks/cube1x1x1.mdl",
    [2] = "models/hunter/blocks/cube2x2x2.mdl",
    [4] = "models/hunter/blocks/cube4x4x4.mdl",
    [6] = "models/hunter/blocks/cube6x6x6.mdl",
    [8] = "models/hunter/blocks/cube8x8x8.mdl"
}

if not table.hasValue(table.getKeys(allAvailableModel), SCALE_BLOCK) then
    error(string.format("Cube scale can be 0,25; 0,5; 0,75; 1; 2; 4; 6; 8. Current scale  if %.2f", SCALE_BLOCK))
end

local rangePlaceSqrt = math.pow(RANGE_PLACE, 2)

local cubeModel = allAvailableModel[SCALE_BLOCK]
local sizeOfScale = 46.4
local cubeSize = Vector(SCALE_BLOCK * sizeOfScale, SCALE_BLOCK * sizeOfScale, SCALE_BLOCK * sizeOfScale)

local chipPos = chip():getPos()

if CLIENT then
    local monitoringKeys = {
        [IN_KEY.ATTACK] = false,
        [IN_KEY.ATTACK2] = false
    }
    
    local holoNewCube = hologram.create(Vector(), Angle(), cubeModel)
    holoNewCube:setMaterial("debug/debugportals")
    holoNewCube:setColor(Color(255, 255, 255, 128))
    
    local holoRemoveCube = hologram.create(Vector(), Angle(), cubeModel)
    holoRemoveCube:setMaterial("models/wireframe")
    
    local function findPosOfGrid(pos)
        local offsetPos = pos - chipPos
        local place = offsetPos / cubeSize
        place.x = math.round(place.x)
        place.y = math.round(place.y)
        place.z = math.round(place.z)
        
        return place * cubeSize + chipPos
    end
    
    hook.add("Tick", "SetPosForHolo", function()
        if not isValid(holoNewCube) then return end
        if not isValid(holoRemoveCube) then return end
        if not isValid(owner()) then return end
        if not isValid(owner():getActiveWeapon()) then return end
        
        if owner():getActiveWeapon():getClass() != "weapon_crowbar" then
            holoNewCube:setPos(Vector())
            holoRemoveCube:setPos(Vector())
            return
        end
        
        local tracePos = owner():getEyeTrace().HitPos
        
        if tracePos:getDistanceSqr(owner():getEyePos()) > rangePlaceSqrt then
            holoNewCube:setPos(Vector())
            holoRemoveCube:setPos(Vector())
            return
        end
        
        holoNewCube:setPos(findPosOfGrid(tracePos))
    end)
    
    local function createCube()
        net.start("createCube")
        net.writeVector(holoNewCube:getPos())
        net.writeAngle(holoNewCube:getAngles())
        net.writeString(holoNewCube:getMaterial())
        
        local holoNewCubeColor = holoNewCube:getColor()
        holoNewCubeColor.a = 255
        net.writeColor(holoNewCubeColor)
        
        net.send()
    end
    
    local function removeCube()
        local tracedEntity = owner():getEyeTrace().Entity
        if not isValid(tracedEntity) then return end
        
        net.start("removeCube")
        net.writeEntity(tracedEntity)
        net.send()
    end
    
    local function checkIntrationCubes(ply, key)
        if ply:getActiveWeapon():getClass() != "weapon_crowbar" then return end
        
        if key == IN_KEY.ATTACK and not monitoringKeys[IN_KEY.ATTACK] then
            monitoringKeys[IN_KEY.ATTACK] = true
            removeCube()
        end
        
        if key == IN_KEY.ATTACK2 and not monitoringKeys[IN_KEY.ATTACK2] then
            monitoringKeys[IN_KEY.ATTACK2] = true
            createCube()
        end
    end
    
    hook.add("KeyPress", "KeyPress", function(ply, key)
        if ply ~= owner() then return end
        
        checkIntrationCubes(ply, key)
        
        if table.hasValue(table.getKeys(monitoringKeys), key) then
            monitoringKeys[key] = true
        end
    end)
    
    hook.add("KeyRelease", "KeyRelease", function(ply, key)
        if ply ~= owner() then return end
        if table.hasValue(table.getKeys(monitoringKeys), key) then
            monitoringKeys[key] = false 
        end
    end)
    
elseif SERVER then
    local createSound = "physics/concrete/rock_impact_hard1.wav"
    local removeSound = "physics/concrete/boulder_impact_hard1.wav"
    
    local addedProps = {}
    local cubePos, cubeAngle, cubeMaterial, cubeColor = nil, nil, nil, nil
    
    local function checkCorrectProps()
        local usedPositions = {}
        
        for i = #addedProps, 1, -1 do
            local ent = addedProps[i]
            
            if not isValid(ent) then
                table.remove(addedProps, i)
            else
                local entPos = ent:getPos()
                
                if not table.hasValue(usedPositions, entPos) then
                    table.insert(usedPositions, entPos)
                else
                    table.remove(addedProps, i)
                    ent:remove()
                end
            end
        end
    end
    
    net.receive("createCube", function()
        cubePos = net.readVector()
        cubeAngle = net.readAngle()
        cubeMaterial = net.readString()
        cubeColor = net.readColor()
        
        concmd(string.format("gm_spawn %s", cubeModel))
    end)
    
    net.receive("removeCube", function()
        local tracedEntity = net.readEntity()
        if not isValid(tracedEntity) then return end
        if tracedEntity:getModel() != cubeModel then return end
        
        pcall(function()
            tracedEntity:remove()
            ent:emitSound(removeSound)
        end)
    end)
    
    hook.add("OnEntityCreated", "FindAndChangeCube", function(ent)
        if cubePos == nil then return end
        if not isValid(ent) then return end
        if not isValid(ent:getOwner()) then return end
        if ent:getOwner() != owner() then return end
        if ent:getModel() != cubeModel then return end
        
        ent:setFrozen(true)
        
        ent:setPos(cubePos)
        ent:setAngles(cubeAngle)
        //ent:setMaterial("debug/debugportals")
        ent:setMaterial("sprops/textures/sprops_chrome2")
        ent:setColor(cubeColor)
        ent:emitSound(createSound)
        
        table.insert(addedProps, ent)
        checkCorrectProps()
    end)
end