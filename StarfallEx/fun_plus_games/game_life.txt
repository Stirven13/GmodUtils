--@name Game Life
--@author NepNep | discord: stirven
--@shared

// The Game of Life, also known simply as Life, 
// is a cellular automaton devised by the British mathematician John Horton Conway in 1970.


// [CONFIG] Write size of Panel and Pixels
local panelSize = 2

--[[
List of available size panel
* 0.5x0.5
* 0.75x0.75
* 1x1
* 2x2
* 3x3
* 4x4
* 8x8
* 16x16
* 24x24
* 32x32
]]


// [CONFIG] You set a your rule (available numbers: from 0 to 8)
local rules = {birth = {3, 6, 7, 8}, survival = {3, 4, 6, 7, 8}}  // Default rules B3/S23
table.sort(rules.birth)
table.sort(rules.survival)

--[[
    Default rule: B3/S23
    B - birth   S - survival
    
    local rules = {birth = {3}, survival = {2, 3}}  // Default rules B3/S23
    
    Popular parameters:
    * https://en.wikipedia.org/wiki/Day_and_Night_(cellular_automaton)
      Day and Night rule - B3678/S34678
      (I like it)
    
    * https://en.wikipedia.org/wiki/Life_without_Death
      Life without Death rule - B3/S012345678
    
    * https://en.wikipedia.org/wiki/Highlife_(cellular_automaton)
      Highlife rule - B36/S23
    
    * https://en.wikipedia.org/wiki/Seeds_(cellular_automaton)
      Seeds rule - B2/S
]]


// [CONFIG] Change size of cube if want
local sizeCell = 10
local sizeIndent = 1 // size between cells

local totalSize = sizeCell + sizeIndent // DONT CHANGE IT. It's for optimization

// [CONFIG] The chance of a living cell
local chanceLivedCell = 0.5

// [CONFIG] Couldown of new generation
local couldownGeneration = 1


local pixelCount = 512

local calcRender = {
    countCellInLine = math.floor((pixelCount - sizeCell) / (sizeCell + sizeIndent)) + 1,
    indent = math.round(((pixelCount - sizeIndent) % (sizeCell + sizeIndent)) / 2),
    indentLines = {vertical = {}, horizontal = {}}
}

local function convertBitTableToInt(a)
    local result = ""
    for i = 1, #a do
        if a[i] then
            result = result .. "1"
        else
            result = result .. "0"
        end
    end
    return math.binToInt(result)
end

local function convertIntToBitTable(int)
    local result = {}
    print(int)
    str = math.intToBin(int)
    print(str)
    for i = 1, #str do
        local char = string.sub(str, i, i)
        if char == "1" then
            table.insert(result, true)
        elseif char == "0" then
            table.insert(result, false)
        end
    end
    return result
end

local function printTable(tbl)
    for x = 1, #tbl do
        local str = ""
        for y = 1, #tbl[x] do
            str = str .. tbl[x][y] .. " "
        end
        print(str, "\n")
    end
end

local function printTableBool(tbl)
    for x = 1, #tbl do
        local str = ""
        for y = 1, #tbl[x] do
            if tbl[x][y] then
                str = str .. "T "
            else
                str = str .. "F "
            end
        end
        print(str, "\n")
    end
end

if CLIENT then
    local colors = {
        indent = Color(120, 120, 120),
        live = Color(240, 240, 240),
        death = Color(10, 10, 10)
    }
    
    if sizeIndent ~= 0 then
        for indexLine = 0, calcRender.countCellInLine - 2 do
            table.insert(calcRender.indentLines.vertical, {
                x = calcRender.indent + sizeCell + indexLine * (sizeCell + sizeIndent),
                y = calcRender.indent,
                w = sizeIndent,
                h = pixelCount - calcRender.indent * 2 - sizeIndent
            })
            table.insert(calcRender.indentLines.horizontal, {
                x = calcRender.indent,
                y = calcRender.indent + sizeCell + indexLine * (sizeCell + sizeIndent),
                w = pixelCount - calcRender.indent * 2 - sizeIndent,
                h = sizeIndent
            })
        end
    end
    
    local allCells = {}
    local isGenerate = true
    local multiForFast = 1 / 65536
    
    
    --[[
    NW N NE
    W  *  E
    SW S SE
    
    C  - Centre
    N  - North     
    S  - South     
    W  - West      
    E  - East  
    ]]
    
    local offsets = {
        {-1, -1}, {-1, 0}, {-1, 1},
        {0, -1},           {0, 1},
        {1, -1},  {1, 0},  {1, 1}
    }
    
    local countCellInLinePlusOne = calcRender.countCellInLine + 1
    local function getCountLiveCellsByXY(x, y)
        local countLiveCells = 0
        
        for _, offset in ipairs(offsets) do
            local yTemp = y + offset[1]
            local xTemp = x + offset[2]
            
            if yTemp == 0 then yTemp = calcRender.countCellInLine
            elseif yTemp == countCellInLinePlusOne then yTemp = 1 end
            if xTemp == 0 then xTemp = calcRender.countCellInLine
            elseif xTemp == countCellInLinePlusOne then xTemp = 1 end
            
            if allCells[yTemp][xTemp] then countLiveCells = countLiveCells + 1 end
        end
        return countLiveCells
    end
    
    local couldownGenerationCheck = couldownGeneration
    local function newGeneration()
        if couldownGenerationCheck ~= 0 then
            couldownGenerationCheck = couldownGenerationCheck - 1
            return
        end
        couldownGenerationCheck = couldownGeneration
        
        if cpuTotalAverage() > cpuMax() * 0.8 then return end
        for yCell = 1, calcRender.countCellInLine do
            for xCell = 1, calcRender.countCellInLine do
                if allCells[yCell][xCell] then
                    allCells[yCell][xCell] = table.hasValue(rules.survival, getCountLiveCellsByXY(xCell, yCell))
                else
                    allCells[yCell][xCell] = table.hasValue(rules.birth, getCountLiveCellsByXY(xCell, yCell))
                end
            end
        end
    end
    
    
    print("Generation starting")
    local indexHeight = 1
    hook.add("tick", "CreateCells", function()
        if indexHeight > calcRender.countCellInLine then
            hook.remove("tick", "CreateCells")
            print("Generation end")
            // printTableBool(allCells)
            isGenerate = false
            
            hook.add("tick", "DoGeneration", newGeneration)
            return
        end
        
        table.insert(allCells, {})
        for indexWeight = 1, calcRender.countCellInLine do
            table.insert(allCells[indexHeight], math.random(0, 65536) * multiForFast <= chanceLivedCell)
        end
        indexHeight = indexHeight + 1
    end)
    
    
    local specialSize = calcRender.indent - totalSize
    hook.add("render", "RenderScreen", function()
        render.clear(colors.death)
        
        if sizeIndent ~= 0 then
            render.setColor(colors.indent)
            for indexLine = 1, calcRender.countCellInLine - 1 do
                render.drawRectFast(
                    calcRender.indentLines.vertical[indexLine].x, 
                    calcRender.indentLines.vertical[indexLine].y, 
                    calcRender.indentLines.vertical[indexLine].w, 
                    calcRender.indentLines.vertical[indexLine].h
                )
                render.drawRectFast(
                    calcRender.indentLines.horizontal[indexLine].x, 
                    calcRender.indentLines.horizontal[indexLine].y, 
                    calcRender.indentLines.horizontal[indexLine].w, 
                    calcRender.indentLines.horizontal[indexLine].h
                )
            end
        end
        
        if isGenerate then return end
        
        render.setColor(colors.live)
        for indexHeightCell = 1, calcRender.countCellInLine do
            for indexWeightCell = 1, calcRender.countCellInLine do
                if not allCells[indexWeightCell][indexHeightCell] then continue end
                render.drawRectFast(
                    specialSize + totalSize * indexHeightCell,
                    specialSize + totalSize * indexWeightCell,
                    sizeCell,
                    sizeCell
                )
            end
        end
    end)
    
    
elseif SERVER then
    local panelModels = {
        [0.5] = "models/hunter/plates/plate05x05.mdl",
        [0.75] = "models/hunter/plates/plate075x075.mdl",
        [1] = "models/hunter/plates/plate1x1.mdl",
        [2] = "models/hunter/plates/plate2x2.mdl",
        [3] = "models/hunter/plates/plate3x3.mdl",
        [4] = "models/hunter/plates/plate4x4.mdl",
        [8] = "models/hunter/plates/plate8x8.mdl",
        [16] = "models/hunter/plates/plate16x16.mdl",
        [24] = "models/hunter/plates/plate24x24.mdl",
        [32] = "models/hunter/plates/plate32x32.mdl"
    }
    if not table.hasValue(table.getKeys(panelModels), panelSize) then
        error(string.format("Panel size %d is incorrect", panelSize))
    end
    
    screenProp = prop.createComponent(chip():getPos(), Angle(90, 180, 0) + owner():getAimVector():getAngle() * Angle(0, 1, 0), "starfall_screen", panelModels[panelSize], true)
    screenProp:setPos(Vector(0, 0, -screenProp:getModelBounds()[1] + 10) + chip():getPos())
    screenProp:linkComponent(chip())
end






