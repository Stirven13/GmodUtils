--@name Random Portal Door
--@author NepNep | discord: stirven
--@server

local map = entity(0)
local mapSizeMin, mapSizeMax = map:getModelBounds()

// Fix available map size
local mapName = game.getMap()
print(mapName)

if mapName == "gm_vyten" then
    mapSizeMax.z = 12000
elseif mapName == "gm_mobenix_v3_final" then
    mapSizeMax.z = 5000
elseif mapName == "gm_bigcity_improved" then
    mapSizeMax.z = 1500
elseif mapName == "gm_novenka_d" then
    mapSizeMax.z = 10000
elseif mapName == "gm_excess_construct_13" then
    mapSizeMax.z = 3000
elseif mapName == "gm_mobenix_winter" then
    mapSizeMax.z = 3000
end

local openSound = "Doors.FullOpen4"
local closeSound = "Doors.FullClose4"
local doorOffsetPos = Vector(0, -23.640625, 54.28125)
local pointForSpawn = chip():getPos() - Vector(0, 0, 200)

local function createDoor()
    success, result = pcall(function()
        local door = hologram.create(Vector(), Angle(), "models/props_c17/door01_left.mdl")
        door:setSkin(11)
        door:setBodygroup(1, 1)
        return door
    end)
    
    if success then
        return result
    end
end

local function createPod()
    success, result = pcall(function()
        local pod = prop.createSent(Vector(), Angle(), "acf_pod", true)
        pod:setColor(Color(0, 0, 0, 0))
        pod:setNocollideAll(true)
        return pod
    end)
    
    if success then
        return result
    end
end

local door1 = createDoor()
local door2 = createDoor()

local doorSizeMin, doorSizeMax = door1:getModelBounds()
local doorSize = doorSizeMax - doorSizeMin
local doorSizeMin, doorSizeMax = nil, nil

local pod1 = createPod()
local pod2 = createPod()

local point1 = Vector()
local point2 = Vector()

local angle1 = Angle()
local angle2 = Angle()

local epsilon = 0.1

local function traceCorrectPoint(firstPoint, secondPoint)
    local midPoint = (firstPoint + secondPoint) / 2
    
    if firstPoint:getDistance(midPoint) < epsilon then
        return firstPoint
    end
    
    local firstTraceResult = trace.line(firstPoint, midPoint)
    if firstTraceResult.Hit then
        return traceCorrectPoint(firstPoint, midPoint)
    end
    
    local secondTraceResult = trace.line(midPoint, secondPoint)
    if secondTraceResult.Hit then
        return traceCorrectPoint(midPoint, secondPoint)
    end
    
    return firstPoint
end


local function findFloor(point)
    local upPoint = Vector(point.x, point.y, mapSizeMax.z)    
    local downPoint = Vector(point.x, point.y, mapSizeMin.z)
    
    local roofTraceResult = trace.line(upPoint, downPoint)
    if not roofTraceResult.Hit then return nil end
    
    local roofPoint = roofTraceResult.HitPos // - Vector(0, 0, 50)
    
    local correctedPoint = traceCorrectPoint(roofPoint, downPoint)
    
    return correctedPoint
end

local function setDoorPod(door, pod, pos, angle)
    if isValid(door) then
        door:setAngles(angle)
        
        local tempDoorOffsetPos = doorOffsetPos:clone()
        tempDoorOffsetPos:rotate(angle)
        door:setPos(pos + tempDoorOffsetPos)
    end
    
    if isValid(pod) then
        pod:setPos(pos)
        pod:setAngles(angle)
    end
end

local function checkNotFreeSpace(point, neededSpace)
    local pointOverDoor = point + Vector(0, 0, doorSize.z + 5)
    
    local verticalTraceResult = trace.line(pointOverDoor, pointOverDoor + Vector(0, 0, neededSpace.z))
    
    if verticalTraceResult.Hit then
        return true
    end
    
    return false
end

local function setDoorForPlayer(ply)
    local traceResult = ply:getEyeTrace()
    if not traceResult.Hit then return end
    
    local plySize = ply:obbSize()
    point1 =  traceResult.HitPos
    angle1 = Angle(0, 1, 0) * ply:getEyeAngles()
    angle2 = angle1
    
    local tryCount = 0
    hook.add("tick", "FindPoint", function()
        while true do
            if cpuTotalAverage() > cpuMax() * 0.75 then return end
            tryCount = tryCount + 1
            
            local randomPoint = Vector(math.random(mapSizeMin.x, mapSizeMax.x), math.random(mapSizeMin.y, mapSizeMax.y), 0)
            local correctPoint = findFloor(randomPoint)
            
            if tryCount % 1000 == 0 then
                print(tryCount)
            end
            
            if correctPoint == nil then continue end
            if checkNotFreeSpace(correctPoint, plySize) then continue end
            
            point2 = correctPoint:clone()
            setDoorPod(door1, pod1, point1, angle1)
            setDoorPod(door2, pod2, point2, angle2)
            
            if door2:getWaterLevel() != 0 then continue end
            
            hook.remove("tick", "FindPoint")
            return
        end
    end)
end

hook.add("PlayerSay", "CheckPlayerSay", function(ply, text, teamChat)
    local textLower = string.lower(text)
        
    if not table.hasValue({"!nepdoor", "!nep_door", "!nep door"}, textLower) then return end
    setDoorForPlayer(ply)
end)

hook.add("PlayerEnteredVehicle", "TeleportWhenEnterInPod", function(ply, vehicle, num)
    if not isValid(vehicle) then return end
    if not isValid(pod1) then return end
    if not isValid(pod2) then return end
    
    if vehicle:entIndex() == pod1:entIndex() then
        door1:emitSound(openSound)
        door2:emitSound(closeSound)
        pod1:setPos(point2)
        if isValid(pod1) then
            pod1:remove()
        end
    elseif vehicle:entIndex() == pod2:entIndex() then
        door2:emitSound(openSound)
        door1:emitSound(closeSound)
        pod2:setPos(point1)
        if isValid(pod2) then
            pod2:remove()
        end
    end
end)

hook.add("PlayerLeaveVehicle", "DeleteOnLeave", function(ply, vehicle)
    if not isValid(vehicle) then return end
    if isValid(pod1) then
        if vehicle:entIndex() == pod1:entIndex() then
            pod1:remove()
        end
    end
    
    if isValid(pod2) then
        if vehicle:entIndex() == pod2:entIndex() then
            pod2:remove()
        end
    end
end)

hook.add("Tick", "IsEntityValid", function()
    if not isValid(pod1) then
        pod1 = createPod()
        setDoorPod(nil, pod1, point1, angle1)
    elseif not isValid(pod2) then
        pod2 = createPod()
        setDoorPod(nil, pod2, point2, angle2)
    elseif not isValid(door1) then
        door1 = createDoor()
        setDoorPod(door1, nil, point1, angle1)
    elseif not isValid(door2) then
        door2 = createDoor()
        setDoorPod(door2, nil, point2, angle2)
    end
end)


